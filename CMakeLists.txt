cmake_minimum_required(VERSION 3.10)
project(demo)
# enable_language("CUDA")

file( GLOB  cu  *.cu *.cuh)
file( GLOB  hdr *.hpp *.h)
set(SOURCES test.cpp)

set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} "/home/ubuntu/code_cpp/TA/libtorch-CUDA")
find_package(Torch REQUIRED)
find_package(OpenMP)
find_package(CUDA REQUIRED)
if(OPENMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -Ofast -mavx2 -mfma -march=native")#Rpass=.*
    set(CMAKE_EXE_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

add_executable(${PROJECT_NAME} ${SOURCES} ${hdr})

# set(CMAKE_CUDA_FLAGS "-arch=compute_86 -g -G -Ofast")
# set(CUDA_NVCC_FLAGS "-g -G -w -O3")
#set(CMAKE_CUDA_FLAGS "-gencode arch=compute_86,code=sm_86 -g -G -O3")
#string(APPEND CMAKE_CUDA_FLAGS "-gencode arch=compute_86,code=sm_86 -g -G -O3")
#target_compile_options(${PROJECT_NAME} PRIVATE $<$<COMPLIE_LANGAGE:CUDA>:-gencode arch=compute_86,code=sm_86>)
enable_language(CUDA)
#set_property(TARGET ${PROJECT_NAME} PROPERY CUDA_ARCHITECTURES 86)
CUDA_ADD_LIBRARY(codeCUDA ${cu})
target_link_libraries(${PROJECT_NAME} codeCUDA)

target_include_directories(${PROJECT_NAME} PRIVATE ../libtorch-mkl/include)
target_link_libraries(${PROJECT_NAME} "${TORCH_LIBRARIES}")
set(CMAKE_BUILD_TYPE "Debug")

target_include_directories(${PROJECT_NAME} PRIVATE /opt/intel/mkl/include/)
#target_include_directories(${PROJECT_NAME} PRIVATE /home/OpenBLAS/include/)
target_include_directories(${PROJECT_NAME} PRIVATE /home/ubuntu/code_cpp/TA/my_convolution)

link_directories(/opt/intel/lib/inetl64 /opt/intel/mkl/lib/inetl64)
#target_link_libraries(${PROJECT_NAME} -L/opt/intel/mkl/lib/intel64 -lmkl_intel_ilp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm -ldl)
target_link_libraries(${PROJECT_NAME}  -Wl,--start-group /opt/intel/mkl/lib/intel64/libmkl_intel_ilp64.a /opt/intel/mkl/lib/intel64/libmkl_gnu_thread.a /opt/intel/mkl/lib/intel64/libmkl_core.a -Wl,--end-group -lgomp -lpthread -lm -ldl)
#target_link_libraries(${PROJECT_NAME} PRIVATE nvtx3-c)
#target_link_libraries(${PROJECT_NAME} libopenblas.a)
#target_link_libraries(${PROJECT_NAME} -lm)
#target_link_libraries(${PROJECT_NAME} -lpthread)
